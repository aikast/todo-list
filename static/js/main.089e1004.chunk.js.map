{"version":3,"sources":["components/Counter.js","components/StopWatch.js","App.js","reportWebVitals.js","index.js"],"names":["reducer","state","action","type","count","clickCounter","Counter","useReducer","dispatch","onClick","time","isRunning","initialState","StopWatch","idRef","useRef","useEffect","current","setInterval","console","log","clearInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAEA,SAASA,EAASC,EAAOC,GACxB,OAAQA,EAAOC,MACd,IAAK,YACJ,MAAO,CAACC,MAAOH,EAAMG,MAAQ,EAAGC,aAAcJ,EAAMI,aAAe,GACpE,IAAK,YACJ,MAAO,CAACD,MAAOH,EAAMG,MAAO,EAAGC,aAAcJ,EAAMI,aAAe,IAO9D,IAAMC,EAAU,WAEtB,MAA0BC,qBAAWP,EAAS,CAACI,MAAO,EAAGC,aAAc,IAAvE,mBAAOJ,EAAP,KAAcO,EAAd,KAkBA,OACC,gCACC,wCAAWP,EAAMG,SACjB,gDAAmBH,EAAMI,aAAzB,aACA,wBAAQI,QAAS,kBAAKD,EAAS,CAACL,KAAM,eAAtC,eACA,wBAAQM,QAAS,kBAAKD,EAAS,CAACL,KAAM,eAAtC,mB,OCrCH,SAASH,EAAQC,EAAOC,GACvB,OAAQA,EAAOC,MACd,IAAK,QACJ,MAAO,CAAEO,KAAM,EAAGC,WAAW,GAC9B,IAAK,QACJ,OAAO,2BAAKV,GAAZ,IAAmBU,WAAW,IAC/B,IAAK,OACJ,OAAO,2BAAKV,GAAZ,IAAmBU,WAAW,IAC/B,IAAK,OACJ,OAAO,2BAAKV,GAAZ,IAAmBS,KAAMT,EAAMS,KAAO,KAMzC,IAAME,EAAe,CACpBF,KAAM,EACNC,WAAW,GAGCE,EAAY,WACxB,MAA0BN,qBAAWP,EAASY,GAA9C,mBAAOX,EAAP,KAAcO,EAAd,KACMM,EAAQC,iBAAO,GAiBrB,OAfAC,qBAAU,WAET,GAAIf,EAAMU,UAMV,OAFAG,EAAMG,QAAUC,aAAY,kBAAMV,EAAS,CAACL,KAAM,WAAU,KAErD,WACNgB,QAAQC,IAAI,oBACZC,cAAcP,EAAMG,SACpBH,EAAMG,QAAU,KAEf,CAAChB,EAAMU,YAGT,gCACEV,EAAMS,KACP,wBAAQD,QAAS,kBAAKD,EAAS,CAACL,KAAM,WAAtC,qBACA,wBAAQM,QAAS,kBAAKD,EAAS,CAACL,KAAM,UAAtC,oBACA,wBAAQM,QAAS,kBAAKD,EAAS,CAACL,KAAM,WAAtC,yBCjCYmB,MATf,WACE,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.089e1004.chunk.js","sourcesContent":["import { useReducer, useState } from \"react\"\n\nfunction reducer (state, action) {\n\tswitch (action.type) {\n\t\tcase 'increment': \n\t\t\treturn {count: state.count + 1, clickCounter: state.clickCounter + 1}\n\t\tcase 'decrement':\n\t\t\treturn {count: state.count -1, clickCounter: state.clickCounter + 1 }\n\t\tdefault:\n\t\t\t// подумать что можно вернуть отсюда\n\t\t\tbreak;\n\t}\n}\n\nexport const Counter = () => {\n\n\tconst [state, dispatch] = useReducer(reducer, {count: 0, clickCounter: 0});\n\n\t// const [counter] = useState(0);\n\t// const [clickCounter, setClickCounter] =  useState(0);\n\n\t// function increment () {\n\t// \t///////\n\t// \thandleButtonPress();\n\t// }\n\t// function handleButtonPress () {\n\t// \tsetClickCounter()\n\t// }\n\n\t// function decrement() {\n\t// \t// /////\n\t// \thandleButtonPress()\n\t// }\n\n\treturn(\n\t\t<div>\t\n\t\t\t<p>Count: {state.count}</p>\n\t\t\t<p>Button pressed {state.clickCounter} times </p>\n\t\t\t<button onClick={()=> dispatch({type: 'increment'})}>+</button>\n\t\t\t<button onClick={()=> dispatch({type: 'decrement'})}>-</button>\n\t\t</div>\n\t)\n}","import { useEffect, useReducer, useRef } from \"react\";\n\nfunction reducer(state, action) {\n\tswitch (action.type) {\n\t\tcase 'reset':\n\t\t\treturn { time: 0, isRunning: false }\n\t\tcase 'start':\n\t\t\treturn { ...state, isRunning: true }\n\t\tcase 'stop':\n\t\t\treturn { ...state, isRunning: false }\n\t\tcase 'tick':\n\t\t\treturn { ...state, time: state.time + 1 }\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}\n\nconst initialState = {\n\ttime: 0, \n\tisRunning: false\n}\n\nexport const StopWatch = () => {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\tconst idRef = useRef(0);\n\n\tuseEffect(() => {\n\n\t\tif(!state.isRunning) {\n\t\t\treturn;\n\t\t}\n\n\t\tidRef.current = setInterval(() => dispatch({type: 'tick'}), 1000)\n\n\t\treturn ()=> {\n\t\t\tconsole.log(\"interval cleared\");\n\t\t\tclearInterval(idRef.current);\n\t\t\tidRef.current = 0;\n\t\t}\n\t}, [state.isRunning]);\n\n\treturn (\n\t\t<div>\n\t\t\t{state.time} \n\t\t\t<button onClick={()=> dispatch({type: 'start'})}> start </button>\n\t\t\t<button onClick={()=> dispatch({type: 'stop'})}> stop </button>\n\t\t\t<button onClick={()=> dispatch({type: 'reset'})}> reset </button>\n\t\t</div>\n\t)\n}","import './App.css';\nimport { Counter } from './components/Counter';\nimport { StopWatch } from './components/StopWatch';\n\nfunction App() {\n  return (\n    <>\n      <Counter/>\n      <StopWatch/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}